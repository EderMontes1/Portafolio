%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 1506
%%HiResBoundingBox: 0 0 2382 1506
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2382 1506 re
W
q
[0.24 0 0 -0.24 0 1506] cm
q
0 0 9924.999 6273.0244 re
W*
q
[3.124127 0 0 3.124709 0 0.0073798] cm
/DeviceRGB {} CS
[0.1686 0.1804 0.2902] SC
/DeviceRGB {} cs
[0.1686 0.1804 0.2902] sc
0 0 3176.8867 2008.5496 re
f
Q
q
[50.885525 0 0 50.895004 -9910.9736 6752.8579] cm
q
208.2 -86.199997 m
208.2 -86.147591 208.19743 -86.095314 208.19229 -86.043167 c
208.18715 -85.991013 208.17947 -85.93924 208.16924 -85.88784 c
208.15903 -85.836441 208.1463 -85.785675 208.13109 -85.735542 c
208.11588 -85.685394 208.09824 -85.636108 208.07817 -85.587692 c
208.05814 -85.539284 208.03575 -85.491966 208.01105 -85.445755 c
207.98634 -85.399536 207.95944 -85.354645 207.93033 -85.311073 c
207.90123 -85.267509 207.87006 -85.225471 207.83681 -85.184967 c
207.80356 -85.144463 207.76842 -85.105682 207.73135 -85.068626 c
207.69431 -85.031578 207.65553 -84.996429 207.61502 -84.963188 c
207.57451 -84.929939 207.53247 -84.898758 207.48891 -84.869644 c
207.44534 -84.840538 207.40045 -84.813629 207.35423 -84.788925 c
207.30801 -84.764221 207.2607 -84.741844 207.21228 -84.721786 c
207.16388 -84.701736 207.11461 -84.684105 207.06445 -84.6689 c
207.01431 -84.653687 206.96353 -84.640968 206.91212 -84.630745 c
206.86075 -84.620522 206.80898 -84.612846 206.75684 -84.607712 c
206.7047 -84.602577 206.65242 -84.600006 206.60001 -84.599998 c
206.54761 -84.600006 206.49533 -84.602577 206.44319 -84.607712 c
206.39104 -84.612846 206.33925 -84.620522 206.28784 -84.630737 c
206.23645 -84.640968 206.18568 -84.653687 206.13553 -84.668892 c
206.08539 -84.684097 206.0361 -84.701729 205.98769 -84.721779 c
205.9393 -84.741837 205.89198 -84.764214 205.84576 -84.788918 c
205.79956 -84.813622 205.75467 -84.840523 205.71107 -84.869629 c
205.66751 -84.89875 205.62549 -84.929932 205.58498 -84.963173 c
205.54448 -84.996422 205.50569 -85.03157 205.46863 -85.068619 c
205.43158 -85.105675 205.39644 -85.144455 205.36319 -85.184959 c
205.32994 -85.225464 205.29875 -85.267502 205.26962 -85.311066 c
205.24052 -85.354637 205.21362 -85.399536 205.18892 -85.445747 c
205.16422 -85.491966 205.14185 -85.539284 205.12178 -85.587692 c
205.10175 -85.636108 205.08412 -85.685387 205.06891 -85.735535 c
205.0537 -85.785675 205.04097 -85.836441 205.03075 -85.88784 c
205.02052 -85.93924 205.01285 -85.991013 205.00771 -86.043167 c
205.00256 -86.095314 205 -86.147591 205 -86.199997 c
205 -86.252403 205.00256 -86.30468 205.00769 -86.356834 c
205.01283 -86.408981 205.02052 -86.460747 205.03073 -86.512138 c
205.04097 -86.563538 205.05368 -86.614304 205.06889 -86.664452 c
205.08411 -86.714592 205.10175 -86.76387 205.12178 -86.812279 c
205.14185 -86.860695 205.16423 -86.908012 205.18893 -86.954224 c
205.21364 -87.000443 205.24054 -87.045334 205.26964 -87.088898 c
205.29877 -87.132469 205.32994 -87.174507 205.36317 -87.215019 c
205.39642 -87.255524 205.43158 -87.294304 205.46863 -87.33136 c
205.50569 -87.368416 205.54448 -87.403564 205.58498 -87.436806 c
205.62549 -87.470055 205.66751 -87.501236 205.71107 -87.530342 c
205.75467 -87.559456 205.79956 -87.586365 205.84576 -87.611061 c
205.89198 -87.635765 205.9393 -87.658142 205.98769 -87.678192 c
206.0361 -87.69825 206.08539 -87.715881 206.13554 -87.731102 c
206.18568 -87.746315 206.23645 -87.759033 206.28784 -87.769249 c
206.33925 -87.779472 206.39104 -87.787155 206.44319 -87.79229 c
206.49533 -87.797424 206.54761 -87.799995 206.60001 -87.799995 c
206.65242 -87.799995 206.70468 -87.797432 206.75682 -87.792297 c
206.80898 -87.787155 206.86075 -87.779472 206.91212 -87.769249 c
206.96353 -87.759033 207.01431 -87.746315 207.06445 -87.731094 c
207.11461 -87.715881 207.16388 -87.69825 207.21228 -87.678192 c
207.2607 -87.658142 207.30801 -87.635765 207.35423 -87.611061 c
207.40045 -87.586365 207.44534 -87.559456 207.48891 -87.530342 c
207.53247 -87.501236 207.57451 -87.470055 207.61502 -87.436813 c
207.65553 -87.403572 207.69431 -87.368416 207.73135 -87.33136 c
207.76842 -87.294304 207.80356 -87.255524 207.83681 -87.215012 c
207.87006 -87.174507 207.90121 -87.132469 207.93031 -87.088898 c
207.95944 -87.045334 207.98636 -87.000443 208.01106 -86.954224 c
208.03577 -86.908012 208.05815 -86.860695 208.0782 -86.812279 c
208.09827 -86.76387 208.11589 -86.714592 208.1311 -86.664452 c
208.14632 -86.614304 208.15903 -86.563538 208.16924 -86.512138 c
208.17947 -86.460747 208.18715 -86.408981 208.19229 -86.356834 c
208.19743 -86.30468 208.2 -86.252403 208.2 -86.199997 c
h
W
[3.2 0 0 3.2 204.999994 -87.799993] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0.000002 def
/yMin -0.000001 def
/xMax 1.000002 def
/yMax 0.999998 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
0.000002 1.000002 0 axialSH
Q
q
213.7 -86.199997 m
213.70001 -86.147591 213.69745 -86.095314 213.69231 -86.043167 c
213.68716 -85.991013 213.67947 -85.93924 213.66924 -85.88784 c
213.65903 -85.836441 213.6463 -85.785675 213.63109 -85.735542 c
213.61588 -85.685394 213.59824 -85.636108 213.57819 -85.587692 c
213.55815 -85.539284 213.53577 -85.491966 213.51105 -85.445755 c
213.48634 -85.399536 213.45944 -85.354645 213.43033 -85.311073 c
213.40123 -85.267509 213.37006 -85.225471 213.33682 -85.184967 c
213.30357 -85.144463 213.26843 -85.105682 213.23137 -85.068626 c
213.19432 -85.031578 213.15555 -84.996429 213.11504 -84.963188 c
213.07452 -84.929939 213.03247 -84.898758 212.98889 -84.869644 c
212.94533 -84.840538 212.90044 -84.813629 212.85422 -84.788925 c
212.80801 -84.764221 212.7607 -84.741844 212.71228 -84.721786 c
212.66388 -84.701736 212.61461 -84.684105 212.56447 -84.6689 c
212.51431 -84.653687 212.46355 -84.640968 212.41214 -84.630745 c
212.36076 -84.620522 212.30899 -84.612846 212.25684 -84.607712 c
212.2047 -84.602577 212.15242 -84.600006 212.10001 -84.599998 c
212.04761 -84.600006 211.99533 -84.602577 211.94319 -84.607712 c
211.89102 -84.612846 211.83923 -84.620522 211.78783 -84.630737 c
211.73645 -84.640968 211.68568 -84.653687 211.63553 -84.668892 c
211.5854 -84.684097 211.53612 -84.701729 211.4877 -84.721779 c
211.43929 -84.741837 211.39198 -84.764214 211.34576 -84.788918 c
211.29956 -84.813622 211.25467 -84.840523 211.21107 -84.869629 c
211.16751 -84.89875 211.12549 -84.929932 211.08498 -84.963173 c
211.04448 -84.996422 211.00569 -85.03157 210.96863 -85.068619 c
210.93158 -85.105675 210.89644 -85.144455 210.86319 -85.184959 c
210.82993 -85.225464 210.79874 -85.267502 210.76962 -85.311066 c
210.74052 -85.354637 210.71361 -85.399536 210.6889 -85.445747 c
210.6642 -85.491966 210.64183 -85.539284 210.62177 -85.587692 c
210.60172 -85.636108 210.58409 -85.685387 210.56888 -85.735535 c
210.55367 -85.785675 210.54094 -85.836441 210.53073 -85.88784 c
210.52051 -85.93924 210.51283 -85.991013 210.50769 -86.043167 c
210.50256 -86.095314 210.5 -86.147591 210.5 -86.199997 c
210.5 -86.252403 210.50256 -86.30468 210.50769 -86.356834 c
210.51283 -86.408981 210.52051 -86.460747 210.53072 -86.512138 c
210.54094 -86.563538 210.55367 -86.614304 210.56888 -86.664452 c
210.58409 -86.714592 210.60172 -86.76387 210.62177 -86.812279 c
210.64183 -86.860695 210.66422 -86.908012 210.68892 -86.954224 c
210.71362 -87.000443 210.74052 -87.045334 210.76962 -87.088898 c
210.79874 -87.132469 210.82993 -87.174507 210.86317 -87.215019 c
210.89642 -87.255524 210.93158 -87.294304 210.96863 -87.33136 c
211.00569 -87.368416 211.04448 -87.403564 211.08498 -87.436806 c
211.12549 -87.470055 211.16751 -87.501236 211.21106 -87.530342 c
211.25465 -87.559456 211.29956 -87.586365 211.34576 -87.611061 c
211.39198 -87.635765 211.43929 -87.658142 211.4877 -87.678192 c
211.53612 -87.69825 211.5854 -87.715881 211.63554 -87.731102 c
211.68568 -87.746315 211.73645 -87.759033 211.78783 -87.769249 c
211.83923 -87.779472 211.89102 -87.787155 211.94319 -87.79229 c
211.99533 -87.797424 212.04761 -87.799995 212.10001 -87.799995 c
212.15242 -87.799995 212.2047 -87.797432 212.25684 -87.792297 c
212.30899 -87.787155 212.36076 -87.779472 212.41214 -87.769249 c
212.46355 -87.759033 212.51431 -87.746315 212.56447 -87.731094 c
212.61461 -87.715881 212.66388 -87.69825 212.71228 -87.678192 c
212.7607 -87.658142 212.80801 -87.635765 212.85422 -87.611061 c
212.90044 -87.586365 212.94533 -87.559456 212.98889 -87.530342 c
213.03247 -87.501236 213.07452 -87.470055 213.11504 -87.436813 c
213.15555 -87.403572 213.19432 -87.368416 213.23137 -87.33136 c
213.26843 -87.294304 213.30357 -87.255524 213.33681 -87.215012 c
213.37006 -87.174507 213.40123 -87.132469 213.43033 -87.088898 c
213.45944 -87.045334 213.48636 -87.000443 213.51106 -86.954224 c
213.53577 -86.908012 213.55815 -86.860695 213.57819 -86.812279 c
213.59824 -86.76387 213.61588 -86.714592 213.6311 -86.664452 c
213.64632 -86.614304 213.65903 -86.563538 213.66924 -86.512138 c
213.67947 -86.460747 213.68716 -86.408981 213.69231 -86.356834 c
213.69745 -86.30468 213.70001 -86.252403 213.7 -86.199997 c
h
W
[3.2 0 0 3.2 210.499998 -87.799993] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0.000001 def
/yMin -0.000001 def
/xMax 1.000004 def
/yMax 0.999998 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
0.000001 1.000004 0 axialSH
Q
q
219.2 -86.199997 m
219.20001 -86.147591 219.19745 -86.095314 219.19231 -86.043167 c
219.18716 -85.991013 219.17947 -85.93924 219.16925 -85.88784 c
219.15904 -85.836441 219.14633 -85.785675 219.1311 -85.735542 c
219.11589 -85.685394 219.09827 -85.636108 219.0782 -85.587692 c
219.05817 -85.539284 219.0358 -85.491966 219.01109 -85.445755 c
218.98639 -85.399536 218.95947 -85.354645 218.93034 -85.311073 c
218.90125 -85.267509 218.87007 -85.225471 218.83682 -85.184967 c
218.80359 -85.144463 218.76843 -85.105682 218.73137 -85.068626 c
218.69432 -85.031578 218.65553 -84.996429 218.61502 -84.963188 c
218.57451 -84.929939 218.53247 -84.898758 218.48888 -84.869644 c
218.44531 -84.840538 218.40044 -84.813629 218.35422 -84.788925 c
218.308 -84.764221 218.26068 -84.741844 218.21227 -84.721786 c
218.16386 -84.701736 218.11459 -84.684105 218.06445 -84.6689 c
218.01431 -84.653687 217.96353 -84.640968 217.91212 -84.630745 c
217.86075 -84.620522 217.80898 -84.612846 217.75684 -84.607712 c
217.7047 -84.602577 217.65242 -84.600006 217.60001 -84.599998 c
217.54761 -84.600006 217.49533 -84.602577 217.44319 -84.607712 c
217.39104 -84.612846 217.33925 -84.620522 217.28784 -84.630737 c
217.23645 -84.640968 217.18568 -84.653687 217.13553 -84.668892 c
217.0854 -84.684097 217.03612 -84.701729 216.9877 -84.721779 c
216.93929 -84.741837 216.89198 -84.764214 216.84576 -84.788918 c
216.79955 -84.813622 216.75465 -84.840523 216.71107 -84.869629 c
216.66751 -84.89875 216.62549 -84.929932 216.58498 -84.963173 c
216.54446 -84.996422 216.50568 -85.03157 216.46861 -85.068619 c
216.43155 -85.105675 216.39639 -85.144455 216.36314 -85.184959 c
216.3299 -85.225464 216.29872 -85.267502 216.26961 -85.311066 c
216.24051 -85.354637 216.21361 -85.399536 216.1889 -85.445747 c
216.1642 -85.491966 216.14183 -85.539284 216.12177 -85.587692 c
216.10172 -85.636108 216.08409 -85.685387 216.06889 -85.735535 c
216.05368 -85.785675 216.04095 -85.836441 216.03072 -85.88784 c
216.02051 -85.93924 216.01283 -85.991013 216.00771 -86.043167 c
216.00258 -86.095314 216.00002 -86.147591 216 -86.199997 c
216.00002 -86.252403 216.00258 -86.30468 216.00772 -86.356834 c
216.01283 -86.408981 216.02051 -86.460747 216.03073 -86.512138 c
216.04095 -86.563538 216.05368 -86.614304 216.06889 -86.664452 c
216.08409 -86.714592 216.10172 -86.76387 216.12175 -86.812279 c
216.14182 -86.860695 216.16418 -86.908012 216.18889 -86.954224 c
216.21359 -87.000443 216.24051 -87.045334 216.26961 -87.088898 c
216.29872 -87.132469 216.32991 -87.174507 216.36316 -87.215019 c
216.39641 -87.255524 216.43155 -87.294304 216.4686 -87.33136 c
216.50566 -87.368416 216.54445 -87.403564 216.58495 -87.436806 c
216.62546 -87.470055 216.6675 -87.501236 216.71106 -87.530342 c
216.75464 -87.559456 216.79953 -87.586365 216.84575 -87.611061 c
216.89197 -87.635765 216.93929 -87.658142 216.98769 -87.678192 c
217.0361 -87.69825 217.08539 -87.715881 217.13554 -87.731102 c
217.18568 -87.746315 217.23645 -87.759033 217.28784 -87.769249 c
217.33925 -87.779472 217.39104 -87.787155 217.44319 -87.79229 c
217.49533 -87.797424 217.54761 -87.799995 217.60001 -87.799995 c
217.65242 -87.799995 217.7047 -87.797432 217.75684 -87.792297 c
217.80898 -87.787155 217.86075 -87.779472 217.91212 -87.769249 c
217.96353 -87.759033 218.01431 -87.746315 218.06447 -87.731094 c
218.11459 -87.715881 218.16386 -87.69825 218.21227 -87.678192 c
218.26068 -87.658142 218.308 -87.635765 218.35422 -87.611061 c
218.40042 -87.586365 218.4453 -87.559456 218.48886 -87.530342 c
218.53246 -87.501236 218.57449 -87.470055 218.61501 -87.436813 c
218.65552 -87.403572 218.69431 -87.368416 218.73135 -87.33136 c
218.76842 -87.294304 218.80356 -87.255524 218.83679 -87.215012 c
218.87004 -87.174507 218.90121 -87.132469 218.93031 -87.088898 c
218.95944 -87.045334 218.98636 -87.000443 219.01106 -86.954224 c
219.03577 -86.908012 219.05815 -86.860695 219.07819 -86.812279 c
219.09825 -86.76387 219.11589 -86.714592 219.1311 -86.664452 c
219.14633 -86.614304 219.15904 -86.563538 219.16925 -86.512138 c
219.17947 -86.460747 219.18716 -86.408981 219.19232 -86.356834 c
219.19745 -86.30468 219.20001 -86.252403 219.2 -86.199997 c
h
W
[3.2 0 0 3.2 216.000002 -87.799993] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000001 def
/yMin -0.000001 def
/xMax 1.000002 def
/yMax 0.999998 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
-0.000001 1.000002 0 axialSH
Q
q
200.2 -92.5 m
200.2 -49.599998 l
254.5 -49.599998 l
254.5 -92.5 l
200.2 -92.5 l
h
252 -52 m
202.7 -52 l
202.7 -80 l
252 -80 l
252 -52 l
h
252 -82.5 m
202.7 -82.5 l
202.7 -90 l
252 -90 l
252 -82.5 l
h
W
[54.3 0 0 42.900001 200.199994 -92.499992] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
q
222.5 -63.700001 m
217.10001 -66.5 l
222.5 -69.300003 l
221.7 -71.099998 l
214.39999 -67.199997 l
214.39999 -65.800003 l
221.7 -62 l
222.5 -63.700001 l
h
W
[8.100006 0 0 9.099999 214.400002 -71.099996] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000002 def
/yMin -0 def
/xMax 0.999999 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
-0.000002 0.999999 0 axialSH
Q
q
231.2 -73.699997 m
229 -73.699997 l
223.7 -59.900002 l
226 -59.900002 l
231.2 -73.699997 l
h
W
[7.5 0 0 13.799995 223.699997 -73.699991] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
q
233.3 -62 m
240.60001 -65.800003 l
240.60001 -67.199997 l
233.3 -71.099998 l
232.39999 -69.300003 l
237.8 -66.5 l
232.39999 -63.700001 l
233.3 -62 l
h
W
[8.200012 0 0 9.099999 232.400001 -71.099996] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000001 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
-0.000001 1 0 axialSH
Q
Q
q
[26.249302 0 0 26.25419 9622.4404 276.36725] cm
q
-235 0 3 218 re
W
[3 0 0 217.999996 -234.999978 -0.00000273549] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000007 def
/yMin 0 def
/xMax 0.999992 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
-0.000007 0.999992 0 axialSH
Q
Q
q
[216.37308 0 0 216.41338 3599.0203 288.76816] cm
q
4.66 15.96 m
4.64 17.4 l
4.64 17.42 l
5.253333 17.393333 5.746666 17.379999 6.12 17.379999 c
10.76 17.379999 l
10.76 17.873333 10.74 18.253332 10.7 18.519999 c
10.54 19.546665 9.86 20.059998 8.66 20.059998 c
3.34 20.059998 l
2.766666 20.059998 2.316666 19.893332 1.99 19.559998 c
1.663333 19.226664 1.5 18.773331 1.5 18.199997 c
1.5 6.479997 l
1.64 6.339997 l
10.259999 6.339997 l
10.339999 6.726664 10.379999 7.146663 10.379999 7.599997 c
10.379999 8.05333 10.286666 8.526664 10.099999 9.019997 c
4.639999 9.019997 l
4.659999 10.459997 l
4.659999 11.859997 l
5.006666 11.846664 5.46 11.839996 6.02 11.839996 c
9.08 11.839996 l
9.2 12.21333 9.26 12.639997 9.26 13.119996 c
9.26 13.599996 9.2 14.039995 9.08 14.439996 c
4.66 14.439996 l
4.66 15.959995 l
4.66 15.96 l
h
12.56 19.959999 m
13.620001 6.359999 l
14.206668 6.253332 14.900001 6.199999 15.700001 6.199999 c
16.500002 6.199999 17.200001 6.253332 17.800001 6.359999 c
18.980001 11.259998 l
19.446669 13.473332 19.693335 14.679998 19.720001 14.879998 c
19.860001 14.879998 l
19.913334 14.546665 20.16 13.339998 20.6 11.259998 c
21.800001 6.359998 l
22.386667 6.253332 23.08 6.199998 23.880001 6.199998 c
24.680002 6.199998 25.380001 6.253332 25.980001 6.359998 c
27.040001 19.959999 l
26.626667 20.066666 26.116667 20.119999 25.51 20.119999 c
24.903334 20.119999 24.406668 20.086666 24.02 20.019999 c
23.700001 14.459999 l
23.606668 12.246666 23.553335 10.706666 23.540001 9.839999 c
23.42 9.839999 l
21.440001 17.98 l
20.960001 18.059999 20.410002 18.1 19.790001 18.1 c
19.17 18.1 18.620001 18.059999 18.140001 17.98 c
16.18 9.839999 l
16.040001 9.839999 l
16.040001 11.026666 15.986668 12.566666 15.880001 14.459999 c
15.580001 20.019999 l
15.193335 20.086666 14.696668 20.119999 14.090001 20.119999 c
13.483335 20.119999 12.973334 20.066666 12.560001 19.959999 c
12.56 19.959999 l
h
W
[25.540003 0 0 13.92 1.5 6.199999] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0 mul 0 add
1 index 1 exp -0.369 mul 1 add
2 index 1 exp 0.439 mul 0.561 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
